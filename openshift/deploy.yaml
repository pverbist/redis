---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: This template provides a distributed Redis Sentinel cluster.
    iconClass: icon-redis
    openshift.io/display-name: Redis Sentinel Cluster
    tags: database,redis
    template.openshift.io/provider-display-name: pverbist
  name: redis-ha
objects:
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: redis-ha
    name: redis-ha-master-svc
  spec:
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: redis-ha
      redis-node: "true"
      redis-role: master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: redis-ha
      role: service
    name: redis-ha-sentinel-svc
  spec:
    ports:
    - port: 26379
      protocol: TCP
      targetPort: 26379
    selector:
      app: redis-ha
      redis-role: sentinel
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: redis-ha
      role: service
    name: redis-ha-slave-svc
  spec:
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: redis-ha
      redis-node: "true"
      redis-role: slave
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    annotations:
    labels:
      app: redis-ha
      name: redis-ha-server
      redis-node: "true"
    name: redis-ha-server
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis-ha
        component: server
        name: redis-ha-server
        redis-node: "true"
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis-ha
          component: server
          name: redis-ha-server
          redis-node: "true"
      spec:
        containers:
        - env:
          - name: REDIS_SENTINEL_SERVICE_HOST
            value: redis-sentinel
          - name: REDIS_CHART_PREFIX
            value: redis-ha-
          image: "${REDIS_IMAGE}"
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources:
            limits:
              memory: 700Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /redis-master-data
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: redis
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
- kind: Deployment
  apiVersion: extensions/v1beta1
  metadata:
    annotations:
    labels:
      app: redis-ha
    name: redis-ha-sentinel
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: redis-ha
        component: sentinel
        name: redis-ha-sentinel
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: redis-ha
          component: sentinel
          name: redis-ha-sentinel
      spec:
        containers:
        - env:
          - name: SENTINEL
            value: "true"
          - name: REDIS_CHART_PREFIX
            value: redis-ha-
          image: "${REDIS_IMAGE}"
          imagePullPolicy: IfNotPresent
          name: sentinel
          ports:
          - containerPort: 26379
            protocol: TCP
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: redis
        terminationGracePeriodSeconds: 30
parameters:
- description: Redis container image
  displayName: Redis container image
  name: REDIS_IMAGE
  required: true
  value: "pverbist/redis:latest"

